// jshint esversion: 6, node: true
"use strict";
if (typeof require !== 'undefined' && typeof equal === 'undefined') {
    var equal = require( './esequal' );
}
console.log('equal()');

console.log( 'must be a function' );
console.assert( typeof equal === 'function' );
console.assert( equal.length === 3 );
console.assert( equal.name === 'equal' );
console.log('-- Ok');

console.log( 'should make strict comparison' );
console.assert(  equal( "", "" ) );
console.assert(  equal( "", "" ) === equal.VALUE_AND_TYPE );
console.assert( !equal( "Hello", "hello" ) );
console.assert(  equal( "Hello", "hello" ) === equal.NOT_EQUAL );
console.assert(  equal( "Hello", "Hello" ) );
console.assert(  equal( "Hello", "Hello" ) === equal.VALUE_AND_TYPE );
console.assert(  equal( true, true ) );
console.assert(  equal( true, true ) === equal.VALUE_AND_TYPE );
console.assert(  equal( false, false ) );
console.assert(  equal( false, false ) === equal.VALUE_AND_TYPE );
console.assert( !equal( true, false ) );
console.assert(  equal( true, false ) === equal.NOT_EQUAL);
console.assert( !equal( true, 1 ) );
console.assert(  equal( true, 1 ) === equal.NOT_EQUAL );
console.assert( !equal( true, 0 ) );
console.assert(  equal( true, 0 ) === equal.NOT_EQUAL );
console.assert( !equal( true, "hello" ) );
console.assert(  equal( true, "hello" ) === equal.NOT_EQUAL );
console.assert( !equal( true, '' ) );
console.assert(  equal( true, '' ) === equal.NOT_EQUAL );
console.assert( !equal( false, 0 ) );
console.assert(  equal( false, 0 ) === equal.NOT_EQUAL );
console.assert( !equal( false, "" ) );
console.assert(  equal( false, "" ) === equal.NOT_EQUAL );
console.assert( !equal( false, "hello" ) );
console.assert(  equal( false, "hello" ) === equal.NOT_EQUAL );
console.assert( !equal( null, 0 ) );
console.assert(  equal( null, 0 ) === equal.NOT_EQUAL );
console.assert(  equal( null, null ) );
console.assert(  equal( null, null ) === equal.VALUE_AND_TYPE );
console.assert( !equal( null, "null" ) );
console.assert(  equal( null, "null" ) === equal.NOT_EQUAL );
console.assert(  equal( 1, 1 ) );
console.assert(  equal( 1, 1 ) === equal.VALUE_AND_TYPE );
console.assert( !equal( 1, 0 ) );
console.assert(  equal( 1, 0 ) === equal.NOT_EQUAL );
console.assert( !equal( 1, "1" ) );
console.assert(  equal( 1, "1" ) === equal.NOT_EQUAL );
console.assert( !equal( 1, "0" )  );
console.assert(  equal( 1, "0" ) === equal.NOT_EQUAL );
console.assert( !equal( 1.0001, 1.00009 ) );
console.assert(  equal( 1.0001, 1.00009 ) === equal.NOT_EQUAL );
console.assert(  equal( 1.0001, 1.0001 ) );
console.assert(  equal( 1.0001, 1.0001 ) === equal.VALUE_AND_TYPE );
console.assert( !equal( 1.0001, '1.00009' ) );
console.assert(  equal( 1.0001, '1.00009' ) === equal.NOT_EQUAL );
console.assert( !equal( 1.0001, '1.0001' ) );
console.assert(  equal( 1.0001, '1.0001' ) === equal.NOT_EQUAL );
console.assert(  equal( undefined, undefined ) );
console.assert(  equal( undefined, undefined ) === equal.VALUE_AND_TYPE );
console.assert( !equal( undefined, "" ) );
console.assert(  equal( undefined, "" ) === equal.NOT_EQUAL );
console.assert( !equal( undefined, 1 ) );
console.assert(  equal( undefined, 1 ) === equal.NOT_EQUAL );
console.assert( !equal( undefined, false ) );
console.assert(  equal( undefined, false ) === equal.NOT_EQUAL );
console.assert( !equal( undefined, null ) );
console.assert(  equal( undefined, null ) === equal.NOT_EQUAL );
console.assert( !equal( undefined, {} ) );
console.assert(  equal( undefined, {} ) === equal.NOT_EQUAL );
console.log( '-- Ok' );

console.log( 'should make a non strict comparison with the "nonStrict" options is true' );
console.assert( !equal( true, false, {nonStrict: true}  ) );
console.assert(  equal( true, 1, {nonStrict: true}  ) );
console.assert(  equal( true, 1, {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( true, 0, {nonStrict: true}  ) );
console.assert( !equal( true, -1, {nonStrict: true}  ) );
console.assert( !equal( true, "true", {nonStrict: true}  ) );
console.assert( !equal( true, "false", {nonStrict: true}  ) );
console.assert(  equal( true, "1", {nonStrict: true}  ) );
console.assert(  equal( true, "1", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( true, "0", {nonStrict: true}  ) );
console.assert( !equal( true, "-1", {nonStrict: true}  ) );
console.assert( !equal( true, "", {nonStrict: true}  ) );
console.assert( !equal( true, null, {nonStrict: true}  ) );
console.assert( !equal( true, undefined, {nonStrict: true}  ) );
console.assert( !equal( true, Infinity, {nonStrict: true}  ) );
console.assert( !equal( true, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( true, [], {nonStrict: true}  ) );
console.assert( !equal( true, {}, {nonStrict: true}  ) );
console.assert( !equal( true, [[]], {nonStrict: true}  ) );
console.assert( !equal( true, [0], {nonStrict: true}  ) );
console.assert(  equal( true, [1], {nonStrict: true}  ) );
console.assert(  equal( true, [1], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( true, NaN, {nonStrict: true}  ) );
console.assert( !equal( false, 1, {nonStrict: true}  ) );
console.assert(  equal( false, 0, {nonStrict: true}  ) );
console.assert(  equal( false, 0, {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( false, -1, {nonStrict: true}  ) );
console.assert( !equal( false, "true", {nonStrict: true}  ) );
console.assert( !equal( false, "false", {nonStrict: true}  ) );
console.assert( !equal( false, "1", {nonStrict: true}  ) );
console.assert(  equal( false, "0", {nonStrict: true}  ) );
console.assert(  equal( false, "0", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( false, "-1", {nonStrict: true}  ) );
console.assert(  equal( false, "", {nonStrict: true}  ) );
console.assert(  equal( false, "", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( false, null, {nonStrict: true}  ) );
console.assert( !equal( false, undefined, {nonStrict: true}  ) );
console.assert( !equal( false, Infinity, {nonStrict: true}  ) );
console.assert( !equal( false, -Infinity, {nonStrict: true}  ) );
console.assert(  equal( false, [], {nonStrict: true}  ) );
console.assert(  equal( false, [], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( false, {}, {nonStrict: true}  ) );
console.assert(  equal( false, [[]], {nonStrict: true} ) );
console.assert(  equal( false, [[]], {nonStrict: true} )  === equal.VALUE );
console.assert(  equal( false, [0], {nonStrict: true}  ) );
console.assert(  equal( false, [0], {nonStrict: true}  )  === equal.VALUE );
console.assert( !equal( false, [1], {nonStrict: true}  ) );
console.assert( !equal( false, NaN, {nonStrict: true}  ) );
console.assert( !equal( 1, 0, {nonStrict: true}  ) );
console.assert( !equal( 1, -1, {nonStrict: true}  ) );
console.assert( !equal( 1, "true", {nonStrict: true}  ) );
console.assert( !equal( 1, "false", {nonStrict: true}  ) );
console.assert(  equal( 1, "1", {nonStrict: true}  ) );
console.assert(  equal( 1, "1", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 1, "0", {nonStrict: true}  ) );
console.assert( !equal( 1, "-1", {nonStrict: true}  ) );
console.assert( !equal( 1, "", {nonStrict: true}  ) );
console.assert( !equal( 1, null, {nonStrict: true}  ) );
console.assert( !equal( 1, undefined, {nonStrict: true}  ) );
console.assert( !equal( 1, Infinity, {nonStrict: true}  ) );
console.assert( !equal( 1, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( 1, [], {nonStrict: true}  ) );
console.assert( !equal( 1, {}, {nonStrict: true}  ) );
console.assert( !equal( 1, [[]], {nonStrict: true}  ) );
console.assert( !equal( 1, [0], {nonStrict: true}  ) );
console.assert(  equal( 1, [1], {nonStrict: true}  ) );
console.assert(  equal( 1, [1], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 1, NaN, {nonStrict: true}  ) );
console.assert( !equal( 0, -1, {nonStrict: true}  ) );
console.assert( !equal( 0, "true", {nonStrict: true}  ) );
console.assert( !equal( 0, "false", {nonStrict: true}  ) );
console.assert( !equal( 0, "1", {nonStrict: true}  ) );
console.assert(  equal( 0, "0", {nonStrict: true}  ) );
console.assert(  equal( 0, "0", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 0, "-1", {nonStrict: true}  ) );
console.assert(  equal( 0, "", {nonStrict: true}  ) );
console.assert(  equal( 0, "", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 0, null, {nonStrict: true}  ) );
console.assert( !equal( 0, undefined, {nonStrict: true}  ) );
console.assert( !equal( 0, Infinity, {nonStrict: true}  ) );
console.assert( !equal( 0, -Infinity, {nonStrict: true}  ) );
console.assert(  equal( 0, [], {nonStrict: true}  ) );
console.assert(  equal( 0, [], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 0, {}, {nonStrict: true}  ) );
console.assert(  equal( 0, [[]], {nonStrict: true}  ) );
console.assert(  equal( 0, [[]], {nonStrict: true}  ) === equal.VALUE );
console.assert(  equal( 0, [0], {nonStrict: true}  ) );
console.assert(  equal( 0, [0], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( 0, [1], {nonStrict: true}  ) );
console.assert( !equal( 0, NaN, {nonStrict: true}  ) );
console.assert( !equal( -1, "true", {nonStrict: true}  ) );
console.assert( !equal( -1, "false", {nonStrict: true}  ) );
console.assert( !equal( -1, "1", {nonStrict: true}  ) );
console.assert( !equal( -1, "0", {nonStrict: true}  ) );
console.assert(  equal( -1, "-1", {nonStrict: true}  ) );
console.assert(  equal( -1, "-1", {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( -1, "", {nonStrict: true}  ) );
console.assert( !equal( -1, null, {nonStrict: true}  ) );
console.assert( !equal( -1, undefined, {nonStrict: true}  ) );
console.assert( !equal( -1, Infinity, {nonStrict: true}  ) );
console.assert( !equal( -1, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( -1, [], {nonStrict: true}  ) );
console.assert( !equal( -1, {}, {nonStrict: true}  ) );
console.assert( !equal( -1, [[]], {nonStrict: true}  ) );
console.assert( !equal( -1, [0], {nonStrict: true}  ) );
console.assert( !equal( -1, [1], {nonStrict: true}  ) );
console.assert( !equal( -1, NaN, {nonStrict: true}  ) );
console.assert( !equal( "true", "false", {nonStrict: true}  ) );
console.assert( !equal( "true", "1", {nonStrict: true}  ) );
console.assert( !equal( "true", "0", {nonStrict: true}  ) );
console.assert( !equal( "true", "-1", {nonStrict: true}  ) );
console.assert( !equal( "true", "", {nonStrict: true}  ) );
console.assert( !equal( "true", null, {nonStrict: true}  ) );
console.assert( !equal( "true", undefined, {nonStrict: true}  ) );
console.assert( !equal( "true", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "true", -Infinity, {nonStrict: true}  ) );
console.assert( !equal( "true", [], {nonStrict: true}  ) );
console.assert( !equal( "true", {}, {nonStrict: true}  ) );
console.assert( !equal( "true", [[]], {nonStrict: true}  ) );
console.assert( !equal( "true", [0], {nonStrict: true}  ) );
console.assert( !equal( "true", [1], {nonStrict: true}  ) );
console.assert( !equal( "true", NaN, {nonStrict: true}  ) );
console.assert( !equal( "false", "1", {nonStrict: true}  ) );
console.assert( !equal( "false", "0", {nonStrict: true}  ) );
console.assert( !equal( "false", "-1", {nonStrict: true}  ) );
console.assert( !equal( "false", "", {nonStrict: true}  ) );
console.assert( !equal( "false", null, {nonStrict: true}  ) );
console.assert( !equal( "false", undefined, {nonStrict: true}  ) );
console.assert( !equal( "false", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "false", -Infinity, {nonStrict: true}  ) );
console.assert( !equal( "false", [], {nonStrict: true}  ) );
console.assert( !equal( "false", {}, {nonStrict: true}  ) );
console.assert( !equal( "false", [[]], {nonStrict: true}  ) );
console.assert( !equal( "false", [0], {nonStrict: true}  ) );
console.assert( !equal( "false", [1], {nonStrict: true}  ) );
console.assert( !equal( "false", NaN, {nonStrict: true}  ) );
console.assert( !equal( "1", "0", {nonStrict: true}  ) );
console.assert( !equal( "1", "-1", {nonStrict: true}  ) );
console.assert( !equal( "1", "", {nonStrict: true}  ) );
console.assert( !equal( "1", null, {nonStrict: true}  ) );
console.assert( !equal( "1", undefined, {nonStrict: true}  ) );
console.assert( !equal( "1", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "1", -Infinity, {nonStrict: true}  ) );
console.assert( !equal( "1", [], {nonStrict: true}  ) );
console.assert( !equal( "1", {}, {nonStrict: true}  ) );
console.assert( !equal( "1", [[]], {nonStrict: true}  ) );
console.assert( !equal( "1", [0], {nonStrict: true}  ) );
console.assert(  equal( "1", [1], {nonStrict: true}  ) );
console.assert(  equal( "1", [1], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( "1", NaN, {nonStrict: true}  ) );
console.assert( !equal( "0", "-1", {nonStrict: true}  ) );
console.assert( !equal( "0", "", {nonStrict: true}  ) );
console.assert( !equal( "0", null, {nonStrict: true}  ) );
console.assert( !equal( "0", undefined, {nonStrict: true}  ) );
console.assert( !equal( "0", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "0", -Infinity, {nonStrict: true}  ) );
console.assert( !equal( "0", [], {nonStrict: true}  ) );
console.assert( !equal( "0", {}, {nonStrict: true}  ) );
console.assert( !equal( "0", [[]], {nonStrict: true}  ) );
console.assert(  equal( "0", [0], {nonStrict: true}  ) );
console.assert(  equal( "0", [0], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( "0", [1], {nonStrict: true}  ) );
console.assert( !equal( "0", NaN, {nonStrict: true}  ) );
console.assert( !equal( "-1", "", {nonStrict: true}  ) );
console.assert( !equal( "-1", null, {nonStrict: true}  ) );
console.assert( !equal( "-1", undefined, {nonStrict: true}  ) );
console.assert( !equal( "-1", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "-1", -Infinity, {nonStrict: true}  ) );
console.assert( !equal( "-1", [], {nonStrict: true}  ) );
console.assert( !equal( "-1", {}, {nonStrict: true}  ) );
console.assert( !equal( "-1", [[]], {nonStrict: true}  ) );
console.assert( !equal( "-1", [0], {nonStrict: true}  ) );
console.assert( !equal( "-1", [1], {nonStrict: true}  ) );
console.assert( !equal( "-1", NaN, {nonStrict: true}  ) );
console.assert( !equal( "", null, {nonStrict: true}  ) );
console.assert( !equal( "", undefined, {nonStrict: true}  ) );
console.assert( !equal( "", Infinity, {nonStrict: true}  ) );
console.assert( !equal( "", -Infinity, {nonStrict: true}  ) );
console.assert(  equal( "", [], {nonStrict: true}  ) );
console.assert(  equal( "", [], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( "", {}, {nonStrict: true}  ) );
console.assert(  equal( "", [[]], {nonStrict: true}  ) );
console.assert(  equal( "", [[]], {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( "", [0], {nonStrict: true}  ) );
console.assert( !equal( "", [1], {nonStrict: true}  ) );
console.assert( !equal( "", NaN, {nonStrict: true}  ) );
console.assert(  equal( null, undefined, {nonStrict: true}  ) );
console.assert(  equal( null, undefined, {nonStrict: true}  ) === equal.VALUE );
console.assert( !equal( null, Infinity, {nonStrict: true}  ) );
console.assert( !equal( null, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( null, [], {nonStrict: true}  ) );
console.assert( !equal( null, {}, {nonStrict: true}  ) );
console.assert( !equal( null, [[]], {nonStrict: true}  ) );
console.assert( !equal( null, [0], {nonStrict: true}  ) );
console.assert( !equal( null, [1], {nonStrict: true}  ) );
console.assert( !equal( null, NaN, {nonStrict: true}  ) );
console.assert( !equal( undefined, Infinity, {nonStrict: true}  ) );
console.assert( !equal( undefined, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( undefined, [], {nonStrict: true}  ) );
console.assert( !equal( undefined, {}, {nonStrict: true}  ) );
console.assert( !equal( undefined, [[]], {nonStrict: true}  ) );
console.assert( !equal( undefined, [0], {nonStrict: true}  ) );
console.assert( !equal( undefined, [1], {nonStrict: true}  ) );
console.assert( !equal( undefined, NaN, {nonStrict: true}  ) );
console.assert( !equal( Infinity, -Infinity, {nonStrict: true}  ) );
console.assert( !equal( Infinity, [], {nonStrict: true}  ) );
console.assert( !equal( Infinity, {}, {nonStrict: true}  ) );
console.assert( !equal( Infinity, [[]], {nonStrict: true}  ) );
console.assert( !equal( Infinity, [0], {nonStrict: true}  ) );
console.assert( !equal( Infinity, [1], {nonStrict: true}  ) );
console.assert( !equal( Infinity, NaN, {nonStrict: true}  ) );
console.assert( !equal( -Infinity, [], {nonStrict: true}  ) );
console.assert( !equal( -Infinity, {}, {nonStrict: true}  ) );
console.assert( !equal( -Infinity, [[]], {nonStrict: true}  ) );
console.assert( !equal( -Infinity, [0], {nonStrict: true}  ) );
console.assert( !equal( -Infinity, [1], {nonStrict: true}  ) );
console.assert( !equal( -Infinity, NaN, {nonStrict: true}  ) );
console.assert( !equal( [], {}, {nonStrict: true}  ) );
console.assert( !equal( [], [[]], {nonStrict: true}  ) );
console.assert( !equal( [], [0], {nonStrict: true}  ) );
console.assert( !equal( [], [1], {nonStrict: true}  ) );
console.assert( !equal( [], NaN, {nonStrict: true}  ) );
console.assert( !equal( {}, [[]], {nonStrict: true}  ) );
console.assert( !equal( {}, [0], {nonStrict: true}  ) );
console.assert( !equal( {}, [1], {nonStrict: true}  ) );
console.assert( !equal( {}, NaN, {nonStrict: true}  ) );
console.assert( !equal( [[]], [0], {nonStrict: true}  ) );
console.assert( !equal( [[]], [1], {nonStrict: true}  ) );
console.assert( !equal( [[]], NaN, {nonStrict: true}  ) );
console.assert( !equal( [0], [1], {nonStrict: true}  ) );
console.assert( !equal( [0], NaN, {nonStrict: true}  ) );
console.assert( !equal( [1], NaN, {nonStrict: true}  ) );
console.log( '-- Ok' );

console.log( 'NaN vs NaN should be true');
console.assert(  equal( NaN, NaN ) );
console.assert(  equal( NaN, NaN ) === equal.VALUE_AND_TYPE );
console.assert(  equal( NaN, NaN, {nonStrict: true} ) );
console.assert(  equal( NaN, NaN, {nonStrict: true} ) === equal.VALUE_AND_TYPE );
console.log( '-- Ok' );

if (typeof process !== 'undefined' && typeof process.exit !== 'undefined') {
    process.exit( 0 );
}